// Code generated by Kitex v0.9.1. DO NOT EDIT.

package urlservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	url "shorturl/kitex_gen/short/url"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AddUrl": kitex.NewMethodInfo(
		addUrlHandler,
		newUrlServiceAddUrlArgs,
		newUrlServiceAddUrlResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Update": kitex.NewMethodInfo(
		updateHandler,
		newUrlServiceUpdateArgs,
		newUrlServiceUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Delete": kitex.NewMethodInfo(
		deleteHandler,
		newUrlServiceDeleteArgs,
		newUrlServiceDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Sreach": kitex.NewMethodInfo(
		sreachHandler,
		newUrlServiceSreachArgs,
		newUrlServiceSreachResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	urlServiceServiceInfo                = NewServiceInfo()
	urlServiceServiceInfoForClient       = NewServiceInfoForClient()
	urlServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return urlServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return urlServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return urlServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UrlService"
	handlerType := (*url.UrlService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "url",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func addUrlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceAddUrlArgs)
	realResult := result.(*url.UrlServiceAddUrlResult)
	success, err := handler.(url.UrlService).AddUrl(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceAddUrlArgs() interface{} {
	return url.NewUrlServiceAddUrlArgs()
}

func newUrlServiceAddUrlResult() interface{} {
	return url.NewUrlServiceAddUrlResult()
}

func updateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceUpdateArgs)
	realResult := result.(*url.UrlServiceUpdateResult)
	success, err := handler.(url.UrlService).Update(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceUpdateArgs() interface{} {
	return url.NewUrlServiceUpdateArgs()
}

func newUrlServiceUpdateResult() interface{} {
	return url.NewUrlServiceUpdateResult()
}

func deleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceDeleteArgs)
	realResult := result.(*url.UrlServiceDeleteResult)
	success, err := handler.(url.UrlService).Delete(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceDeleteArgs() interface{} {
	return url.NewUrlServiceDeleteArgs()
}

func newUrlServiceDeleteResult() interface{} {
	return url.NewUrlServiceDeleteResult()
}

func sreachHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*url.UrlServiceSreachArgs)
	realResult := result.(*url.UrlServiceSreachResult)
	success, err := handler.(url.UrlService).Sreach(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUrlServiceSreachArgs() interface{} {
	return url.NewUrlServiceSreachArgs()
}

func newUrlServiceSreachResult() interface{} {
	return url.NewUrlServiceSreachResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddUrl(ctx context.Context, req *url.UrlRequest) (r *url.UrlResponse, err error) {
	var _args url.UrlServiceAddUrlArgs
	_args.Req = req
	var _result url.UrlServiceAddUrlResult
	if err = p.c.Call(ctx, "AddUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Update(ctx context.Context, req *url.UrlRequest) (r *url.UrlResponse, err error) {
	var _args url.UrlServiceUpdateArgs
	_args.Req = req
	var _result url.UrlServiceUpdateResult
	if err = p.c.Call(ctx, "Update", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Delete(ctx context.Context, req *url.UrlRequest) (r *url.UrlResponse, err error) {
	var _args url.UrlServiceDeleteArgs
	_args.Req = req
	var _result url.UrlServiceDeleteResult
	if err = p.c.Call(ctx, "Delete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Sreach(ctx context.Context, req *url.UrlRequest) (r *url.UrlResponse, err error) {
	var _args url.UrlServiceSreachArgs
	_args.Req = req
	var _result url.UrlServiceSreachResult
	if err = p.c.Call(ctx, "Sreach", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
